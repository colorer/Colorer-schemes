<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE custom [
    <!ENTITY shared  SYSTEM "xslt.ent.xml">
]>
<custom xmlns="uri:colorer:custom"  xmlns:xs="http://www.w3.org/2001/XMLSchema">

<custom-type targetNamespace="http://www.w3.org/1999/XSL/Transform" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

&shared;

<outline>
    <element name='function' extract='withAttribute' description='Function definition'/>
</outline>

<top-level>
    <element>stylesheet</element>
    <element>transform</element>
    <element>literal-result-element</element>
</top-level>

<contributors><![CDATA[
    Eugene Efremov <4mirror@mail.ru>
]]></contributors>

<xsd-typedefs>
    <xs:simpleType name="regex"/>
</xsd-typedefs>

<script-n-style>
    <element-attributes name="analyze-string">
        <xs:attribute name="regex" type="xsl:regex"/>
    </element-attributes>
    
    <attribute language="xpath2" scheme-suffix="XML.Pattern" region="def:default"/>
    <attribute language="xpath2" scheme-suffix="XML.Expr" region="def:default"/>
    <attribute language="xpath2" scheme-suffix="XML.Sequence" region="def:default"/>
    <attribute language="xpath2" scheme-suffix="XML.EmbeddedExpr" region="def:default"/>
</script-n-style>


<type xmlns="http://colorer.sf.net/2003/hrc">
    <annotation><documentation>
        Colorer HRC packages group for
            XSLT, XPath and XQuery
        
        This is autogenerated HRC for
            XSL Transformations (XSLT) Version 2.0
            W3C Working Draft 11 February 2005
            http://www.w3.org/TR/xslt20/
        
    </documentation></annotation>
    
    <!-- 
     literal-result-element is abstract. 
     But no substitutionGroup associate with him.
     
     Now we use it for this hack.
     -->
    <scheme name="literal-result-element-substitutionGroup">
        <!--  not work... 
        <inherit scheme="sequence-constructor-group-group">
            <virtual scheme="xml:Attribute.common" subst-scheme="Attribute.common"/>
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="avt-content-error"/>
        </inherit>-->
        
        <inherit scheme="variable-element"/>
        <inherit scheme="instruction-element"/>
        
        <regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
        
        <inherit scheme="xml:content">
            <virtual scheme="xml:content" subst-scheme="literal-result-element-substitutionGroup"/>
            <virtual scheme="xml:Attribute.common" subst-scheme="Attribute.common"/>
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="avt-content-error"/>
        </inherit>
    </scheme>
    
    <scheme name="Attribute.common">
        <inherit scheme="xml:Attribute.common"/>
        <inherit scheme="literal-result-element-attributes-attributeGroup"/>
    </scheme>
    
    <scheme name="avt-content-error">
        <inherit scheme="avt-content"/>
    </scheme>
    
    
    <!-- xpath 2.0 support -->
    
    <scheme name="avt-content">
        <inherit scheme="xmlss-xpath2-XML.EmbeddedExpr-attr">
            <virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
        </inherit>
    </scheme>
    
    <scheme name="pattern-content">
        <inherit scheme="xmlss-xpath2-XML.Pattern-attr">
            <virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
        </inherit>
    </scheme>
    
    <scheme name="expression-content">
        <inherit scheme="xmlss-xpath2-XML.Expr-attr">
            <virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
        </inherit>
    </scheme>
    
    <scheme name="sequence-type-content">
        <inherit scheme="xmlss-xpath2-XML.Sequence-attr"/>
    </scheme>
    
    
    <scheme name="FunctionName">
        <inherit scheme="xpath2:FunctionName"/>
        <!-- xslt2 functions -->
        <keywords region='xpath2:func.name' worddiv="%xpath2:func-wd;">
            <word name='current'/>
            <word name='current-group'/>
            <word name='current-grouping-key'/>
            <word name='document'/>
            <word name='element-available'/>
            <word name='format-date'/>
            <word name='format-dateTime'/>
            <word name='format-number'/>
            <word name='format-time'/>
            <word name='generate-id'/>
            <word name='key'/>
            <word name='regex-group'/>
            <word name='system-property'/>
            <word name='unparsed-entity-public-id'/>
            <word name='unparsed-entity-uri'/>
            <word name='unparsed-text'/>
        </keywords>
    </scheme>
    
    
    
    <!-- demi-XPath -->
    
    <scheme name="QName-content">
        <inherit scheme="xpath2:QName"/>
    </scheme>
    
    <scheme name="nametests-content">
        <inherit scheme="xpath2:NameTest"/>
    </scheme>
    
    
    
    <!-- regexp -->
    
    <scheme name="regex-content-error">
        <inherit scheme="regex-content"/>
    </scheme>
    
    <scheme name="regex-content">
        <inherit scheme="xpath2:XML.Regexp">
            <virtual scheme="xpath2:XML.Regexp.String" subst-scheme="regex-string"/>
        </inherit>
    </scheme>
    
    
    <scheme name="regex-string">
        <regexp match="/(\{{2})([\d\w\s\,]+)(\}{2})/"
            region0="regexp:Quote" region2="def:Number"
            region1="def:PairStart" region3="def:PairEnd"
        />
        <regexp match="/\\(\{{2}|\}{2})/" region="regexp:Symbol"/>
        <regexp match="/\{{2}|(\\|\})\}/" region="def:Error"/>
        <regexp match="/\\\M\{/" region="regexp:Symbol"/>
        <inherit scheme="xpath2:XML.EmbeddedExpr"/>
        <inherit scheme="xpath2:XML.Regexp.String"/>
    </scheme>
    
    
    
    <!-- other types -->
    
    <scheme name="method-content">
        <keywords region="Enumeration">
            <word name="xml"/>
            <word name="xhtml"/>
            <word name="html"/>
            <word name="text"/>
        </keywords>
        <regexp match="/\b(%xml:NCName;)(\:)%xml:NCName;\b/" 
            region0="xmlschema:Scheme.name" 
            region1="xmlschema:Scheme.nsprefix"
            region2="xmlschema:Scheme.nscolon"
        />
    </scheme>
    
    <scheme name="char-content">
        <inherit scheme="xslt:char-content"/>
    </scheme>
    
</type>
</custom-type>
</custom>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Colorer HRC packages group 
   - for XSLT, XPath and XQuery.
   -
   - The Initial Developer of the Original Code is
   - Eugene Efremov <4mirror@mail.ru>
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->