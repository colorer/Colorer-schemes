#!/bin/bash

#################################################################################
# Create HRC from the cmake builtin help
#
# step 1: set paramater generate to N
#         script calls cmake and prints help info into files
# step 2: set parameter generate to Y
#         script processes files from step 1 and creates output file $out
#################################################################################

generate=Y

# path to cmake
cmake=/usr/bin/cmake
# work dir
work=gen-cmake
# input and output files - relative to $work
in_vers=version.txt
in_vars=vars.txt
in_cmds=cmds.txt
out=cmake-auto2.ent.hrc


### prepare working dir

if [ "$generate" = "Y" ]; then
    if ! [ -d $work ]; then
        echo "work directory $work doesn't exist!"
        exit
    fi
    cd $work > /dev/null 
    if ! [ -f $in_vers ] && [ -f $in_vars ] && [ -f $in_cmds ]; then
        echo "create script's input with generate=N!"
        exit
    fi
else
    rm -rf $work
    mkdir $work
    cd $work > /dev/null

    echo "retrieving cmake help"
    $cmake --version > $in_vers
    $cmake --help-variable-list > $in_vars
    $cmake --help-manual cmake-modules | grep '\.\. variable:: CPACK' | sed -e 's/^.\+:: //' >> $in_vars
    $cmake --help-command-list > $in_cmds
    for i in `cat $in_cmds`; do
        $cmake --help-command $i > _$i.txt
    done
    echo "run generator with generate=Y"
    exit
fi


### print header

echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!--
This is autogenerated file. All changes will be lost!" > $out
stat --printf='%.19y\n' $out >> $out
cat $in_vers >> $out
echo -e "-->\n\n\n" >> $out


### expand variables

echo "expanding variables"
vars=`cat $in_vars | tr 'a-zA-Z' 'A-Za-z' | sort | tr 'a-zA-Z' 'A-Za-z' | uniq`
for i in $vars; do
    vars_exp="$vars_exp $i"
    # special handling if variable contains <...>
    if echo "$i" | grep -q '<' ; then
        :
    else
        continue
    fi
    if echo "$i" | grep -q '<FEATURE>' ; then
        :
    elif echo "$i" | grep '<LANG>' | grep -q '<TYPE>' ; then
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/C/' -e 's/<TYPE>/DEFAULT/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/CXX/' -e 's/<TYPE>/DEFAULT/'`"
    elif echo "$i" | grep '<LANG>' | grep -q '<CONFIG>' ; then
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/C/' -e 's/<CONFIG>/Debug/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/C/' -e 's/<CONFIG>/Release/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/C/' -e 's/<CONFIG>/RelWithDebInfo/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/CXX/' -e 's/<CONFIG>/Debug/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/CXX/' -e 's/<CONFIG>/Release/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/CXX/' -e 's/<CONFIG>/RelWithDebInfo/'`"
    elif echo "$i" | grep -q '<LANG>' ; then
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/C/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<LANG>/CXX/'`"
    elif echo "$i" | grep -q '<CONFIG>' ; then
        vars_exp="$vars_exp `echo $i | sed -e 's/<CONFIG>/Debug/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<CONFIG>/Release/'`"
        vars_exp="$vars_exp `echo $i | sed -e 's/<CONFIG>/RelWithDebInfo/'`"
    elif echo "$i" | grep -q '<n>' ; then
        for n in {0..9} ; do
            vars_exp="$vars_exp `echo $i | sed -e "s/<n>/$n/"`"
        done
    fi
done
vars="$vars_exp"


### print variables

echo "printing variables"
echo "<scheme name=\"CMakeVariables\">" >> $out
echo -e "\t<keywords region=\"cmake_variables\" ignorecase=\"yes\">" >> $out
for i in $vars; do
    # skip variable expansion operators
    if [ "$i" = "CACHE" ] || [ "$i" = "ENV" ]; then
        continue
    fi

    if echo "$i" | grep -q '<' ; then
        echo -e "\t\t<!-- $i -->" >> $out
    else
        echo -e "\t\t<word name=\"$i\"/>" >> $out
    fi
done
echo -e "\t</keywords>" >> $out
echo -e "</scheme>\n\n" >> $out


### print commands entity

echo "processing commands"
cmds=`cat $in_cmds | sort`

# pair commands are handled in cmake.hrc - do not generate block rules for them
cmds1=`echo "$cmds" | grep -v '^\(if\|endif\|while\|endwhile\|block\|endblock\|foreach\|endforeach\|function\|endfunction\|macro\|endmacro\)$'`
echo -e "<entity name=\"CMakeCommands\" value=\"(?:`echo $cmds1 | tr ' ' '|'`)\"/>\n" >> $out


### print commands blocks

echo "<scheme name=\"CMakeCommands\">" >> $out
for i in $cmds1; do
    echo -e -n "\t" >> $out
    echo "<block start=\"/\b($i\b%Sep;\()/ix\" end=\"/(\))/\" scheme=\"Keywords_$i\" region00=\"def:Symbol\" region01=\"def:PairStart\" region10=\"def:Symbol\" region11=\"def:PairEnd\"/>" >> $out
done
echo -e "</scheme>\n" >> $out


### print commands keywords

# keywords for some commands are written in cmake.ent.hrc - do not generate it
cmds2=`echo "$cmds" | grep -v '^\(if\|install\|message\)$'`
for i in $cmds2; do
    echo -e "\n<scheme name=\"Keywords_$i\">" >> $out

    # parse commands descriptions to get keywords
    if [ -f _$i.txt ]; then
        keyw=""
        # cut only definitions, expect format "keyword(...)" (allow "(...)" inside too)
        defs=`cat _$i.txt | tr '\n' ' ' | sed -e "s/$i[\ (]/\n\0/g" | sed -n -e "s/.*\($i\ *(\(([^)]*)\|[^)]\)*)\).*/\1/pg"`
        # to skip examples require some "syntactical" element or just one or two values
        defs=`echo "$defs" | grep -e '[<[]' -e '\.\.\.' -e '([A-Z][A-Z0-9_]\+)' -e '([A-Z][A-Z0-9_]\+ [A-Z][A-Z0-9_]\+)'`
        # decompose "<key1|key2|...>" into "key1|key2|..."
        defs=`echo "$defs" | sed -e 's/<\([A-Z][A-Z0-9_]\+\(\ *|\ *[A-Z][A-Z0-9_]\+\)\+\)>/\1/g'`
        # cut to lines, remove "...", expand <LANG>, remove leading <,  select only keywords
        keyw=`echo $defs | sed -e 's/\.\.\.\([][]\)/\1/g' -e 's/[|() ]/\n/g' | tr -d '[]' | sed -e 's/^<LANG>\(.\+\)/C\1\nCXX\1/g' -e 's/^<//g' | sed -n -e 's/^\ *\([A-Z0-9@][A-Z0-9_]\+\)\ *$/\1/pg'`
        # sort trick to put undescore before letters
        keyw=`echo $keyw | tr ' ' '\n' | tr 'a-zA-Z' 'A-Za-z' | sort | tr 'a-zA-Z' 'A-Za-z' | uniq`
        if [ -n "$keyw" ]; then
            echo -e "\t<keywords region=\"cmake_parameters\" ignorecase=\"yes\" priority=\"low\">" >> $out
            for j in $keyw; do
                echo -e "\t\t<word name=\"$j\"/>" >> $out
            done
            echo -e "\t</keywords>" >> $out
        fi
    fi

    # specials...
    if [ "$i" = "file" ] || [ "$i" = "string" ]; then
        echo -e "\t<inherit scheme=\"_HASH_\" />" >> $out
    fi
    if [ "$i" = "enable_language" ] || [ "$i" = "project" ]; then
        echo -e "\t<inherit scheme=\"_LANG_\" />" >> $out
    fi

    echo -e "\t<inherit scheme=\"Arguments\" />" >> $out
    echo -e "</scheme>\n" >> $out
done


### finish

cd - > /dev/null

echo "generated file: $work/$out"

